<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="9.92" tests="14" errors="1" skipped="0" failures="5">
  <properties>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="sun.boot.library.path" value="/home/ja/java/jdk1.8.0_77/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.77-b03"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="maven.multiModuleProjectDirectory" value="/home/ja/IdeaProjects/AJAmarks"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="user.country" value="PL"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/home/ja/IdeaProjects/AJAmarks"/>
    <property name="java.runtime.version" value="1.8.0_77-b03"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/home/ja/java/jdk1.8.0_77/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/usr/share/maven/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/lib/idea-2016.02.02/bin::/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="os.version" value="4.4.0-31-generic"/>
    <property name="user.home" value="/home/ja"/>
    <property name="user.timezone" value="Europe/Warsaw"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="user.name" value="ja"/>
    <property name="java.class.path" value="/usr/share/maven/boot/plexus-classworlds-2.x.jar"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/home/ja/java/jdk1.8.0_77/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher integration-test"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="pl"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_77"/>
    <property name="java.ext.dirs" value="/home/ja/java/jdk1.8.0_77/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/home/ja/java/jdk1.8.0_77/jre/lib/resources.jar:/home/ja/java/jdk1.8.0_77/jre/lib/rt.jar:/home/ja/java/jdk1.8.0_77/jre/lib/sunrsasign.jar:/home/ja/java/jdk1.8.0_77/jre/lib/jsse.jar:/home/ja/java/jdk1.8.0_77/jre/lib/jce.jar:/home/ja/java/jdk1.8.0_77/jre/lib/charsets.jar:/home/ja/java/jdk1.8.0_77/jre/lib/jfr.jar:/home/ja/java/jdk1.8.0_77/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="maven.home" value="/usr/share/maven"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.desktop" value="gnome"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase name="countQuantityOfEachMarkForSchoolTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.745"/>
  <testcase name="isStudentAverageHigherThenInClassroomTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.61"/>
  <testcase name="isStudentAverageHigherThenInAchoolTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.513">
    <failure type="java.lang.AssertionError:">java.lang.AssertionError: null
	at org.junit.Assert.fail(Assert.java:86)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.junit.Assert.assertTrue(Assert.java:52)
	at com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest.isStudentAverageHigherThenInAchoolTest(StatisticServiceIntegrationTest.java:237)
</failure>
    <system-out>Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Classroom (classroomName, classroomNumber, idClassroom) values (?, ?, ?)
Hibernate: insert into Classroom (classroomName, classroomNumber, idClassroom) values (?, ?, ?)
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: select student0_.idStudent as idStuden1_3_, student0_.classroom_idClassroom as classroo5_3_, student0_.firstName as firstNam2_3_, student0_.lastName as lastName3_3_, student0_.userName as userName4_3_ from Student student0_
Hibernate: select classroom0_.idClassroom as idClassr1_0_0_, classroom0_.classroomName as classroo2_0_0_, classroom0_.classroomNumber as classroo3_0_0_, studentsin1_.classroom_idClassroom as classroo5_3_1_, studentsin1_.idStudent as idStuden1_3_1_, studentsin1_.idStudent as idStuden1_3_2_, studentsin1_.classroom_idClassroom as classroo5_3_2_, studentsin1_.firstName as firstNam2_3_2_, studentsin1_.lastName as lastName3_3_2_, studentsin1_.userName as userName4_3_2_, studentmar2_.studentsWithMark_idStudent as students2_2_3_, mark3_.idMark as studentM1_2_3_, mark3_.idMark as idMark1_1_4_, mark3_.markName as markName2_1_4_, mark3_.markValue as markValu3_1_4_ from Classroom classroom0_ left outer join Student studentsin1_ on classroom0_.idClassroom=studentsin1_.classroom_idClassroom left outer join Mark_Student studentmar2_ on studentsin1_.idStudent=studentmar2_.studentsWithMark_idStudent left outer join Mark mark3_ on studentmar2_.studentMarks_idMark=mark3_.idMark where classroom0_.idClassroom=?
Hibernate: select studentswi0_.studentMarks_idMark as studentM1_2_0_, studentswi0_.studentsWithMark_idStudent as students2_2_0_, student1_.idStudent as idStuden1_3_1_, student1_.classroom_idClassroom as classroo5_3_1_, student1_.firstName as firstNam2_3_1_, student1_.lastName as lastName3_3_1_, student1_.userName as userName4_3_1_, classroom2_.idClassroom as idClassr1_0_2_, classroom2_.classroomName as classroo2_0_2_, classroom2_.classroomNumber as classroo3_0_2_ from Mark_Student studentswi0_ inner join Student student1_ on studentswi0_.studentsWithMark_idStudent=student1_.idStudent left outer join Classroom classroom2_ on student1_.classroom_idClassroom=classroom2_.idClassroom where studentswi0_.studentMarks_idMark=?
Hibernate: select * from Student where userName = ?
</system-out>
  </testcase>
  <testcase name="countAverageMarkForSchoolTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.966">
    <failure message="&#10;Expected: is &lt;6.48&gt;&#10;     but: was &lt;2.125&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: 
Expected: is <6.48>
     but: was <2.125>
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
	at com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest.countAverageMarkForSchoolTest(StatisticServiceIntegrationTest.java:219)
]]></failure>
    <system-out>Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Classroom (classroomName, classroomNumber, idClassroom) values (?, ?, ?)
Hibernate: insert into Classroom (classroomName, classroomNumber, idClassroom) values (?, ?, ?)
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: select student0_.idStudent as idStuden1_3_, student0_.classroom_idClassroom as classroo5_3_, student0_.firstName as firstNam2_3_, student0_.lastName as lastName3_3_, student0_.userName as userName4_3_ from Student student0_
Hibernate: select classroom0_.idClassroom as idClassr1_0_0_, classroom0_.classroomName as classroo2_0_0_, classroom0_.classroomNumber as classroo3_0_0_, studentsin1_.classroom_idClassroom as classroo5_3_1_, studentsin1_.idStudent as idStuden1_3_1_, studentsin1_.idStudent as idStuden1_3_2_, studentsin1_.classroom_idClassroom as classroo5_3_2_, studentsin1_.firstName as firstNam2_3_2_, studentsin1_.lastName as lastName3_3_2_, studentsin1_.userName as userName4_3_2_, studentmar2_.studentsWithMark_idStudent as students2_2_3_, mark3_.idMark as studentM1_2_3_, mark3_.idMark as idMark1_1_4_, mark3_.markName as markName2_1_4_, mark3_.markValue as markValu3_1_4_ from Classroom classroom0_ left outer join Student studentsin1_ on classroom0_.idClassroom=studentsin1_.classroom_idClassroom left outer join Mark_Student studentmar2_ on studentsin1_.idStudent=studentmar2_.studentsWithMark_idStudent left outer join Mark mark3_ on studentmar2_.studentMarks_idMark=mark3_.idMark where classroom0_.idClassroom=?
Hibernate: select studentswi0_.studentMarks_idMark as studentM1_2_0_, studentswi0_.studentsWithMark_idStudent as students2_2_0_, student1_.idStudent as idStuden1_3_1_, student1_.classroom_idClassroom as classroo5_3_1_, student1_.firstName as firstNam2_3_1_, student1_.lastName as lastName3_3_1_, student1_.userName as userName4_3_1_, classroom2_.idClassroom as idClassr1_0_2_, classroom2_.classroomName as classroo2_0_2_, classroom2_.classroomNumber as classroo3_0_2_ from Mark_Student studentswi0_ inner join Student student1_ on studentswi0_.studentsWithMark_idStudent=student1_.idStudent left outer join Classroom classroom2_ on student1_.classroom_idClassroom=classroom2_.idClassroom where studentswi0_.studentMarks_idMark=?
</system-out>
  </testcase>
  <testcase name="getStudentsAboveStudentAverageTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="1.301">
    <failure message="&#10;Expected: is &lt;[Student{idStudent=57, userName=&apos;aja&apos;, firstName=&apos;Jakub&apos;, lastName=&apos;Angel&apos;, classroom=Classroom{idClassroom=69, classroomNumber=1, classroomName=&apos;Pierwsza&apos;}, studentMarks=[Mark{idMark=58, markValue=1, markName=&apos;ndst&apos;}, Mark{idMark=59, markValue=2, markName=&apos;mrn&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=61, markValue=4, markName=&apos;db&apos;}, Mark{idMark=62, markValue=5, markName=&apos;bdb&apos;}, Mark{idMark=63, markValue=6, markName=&apos;cel&apos;}]}, Student{idStudent=66, userName=&apos;ibi&apos;, firstName=&apos;Izabela&apos;, lastName=&apos;Break&apos;, classroom=Classroom{idClassroom=70, classroomNumber=2, classroomName=&apos;Druga&apos;}, studentMarks=[Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}]}, Student{idStudent=101, userName=&apos;DefaultuserName&apos;, firstName=&apos;DefaultFirst&apos;, lastName=&apos;DefaultLast&apos;, classroom=Classroom{idClassroom=101, classroomNumber=111, classroomName=&apos;Default&apos;}, studentMarks=[Mark{idMark=101, markValue=111, markName=&apos;Default&apos;}]}]&gt;&#10;     but: was &lt;[Student{idStudent=57, userName=&apos;aja&apos;, firstName=&apos;Jakub&apos;, lastName=&apos;Angel&apos;, classroom=Classroom{idClassroom=69, classroomNumber=1, classroomName=&apos;Pierwsza&apos;}, studentMarks=[Mark{idMark=58, markValue=1, markName=&apos;ndst&apos;}, Mark{idMark=59, markValue=2, markName=&apos;mrn&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=61, markValue=4, markName=&apos;db&apos;}, Mark{idMark=62, markValue=5, markName=&apos;bdb&apos;}, Mark{idMark=63, markValue=6, markName=&apos;cel&apos;}]}, Student{idStudent=66, userName=&apos;ibi&apos;, firstName=&apos;Izabela&apos;, lastName=&apos;Break&apos;, classroom=Classroom{idClassroom=70, classroomNumber=2, classroomName=&apos;Druga&apos;}, studentMarks=[Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=60, markValue=3, markName=&apos;dst&apos;}]}]&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: 
Expected: is <[Student{idStudent=57, userName='aja', firstName='Jakub', lastName='Angel', classroom=Classroom{idClassroom=69, classroomNumber=1, classroomName='Pierwsza'}, studentMarks=[Mark{idMark=58, markValue=1, markName='ndst'}, Mark{idMark=59, markValue=2, markName='mrn'}, Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=61, markValue=4, markName='db'}, Mark{idMark=62, markValue=5, markName='bdb'}, Mark{idMark=63, markValue=6, markName='cel'}]}, Student{idStudent=66, userName='ibi', firstName='Izabela', lastName='Break', classroom=Classroom{idClassroom=70, classroomNumber=2, classroomName='Druga'}, studentMarks=[Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=60, markValue=3, markName='dst'}]}, Student{idStudent=101, userName='DefaultuserName', firstName='DefaultFirst', lastName='DefaultLast', classroom=Classroom{idClassroom=101, classroomNumber=111, classroomName='Default'}, studentMarks=[Mark{idMark=101, markValue=111, markName='Default'}]}]>
     but: was <[Student{idStudent=57, userName='aja', firstName='Jakub', lastName='Angel', classroom=Classroom{idClassroom=69, classroomNumber=1, classroomName='Pierwsza'}, studentMarks=[Mark{idMark=58, markValue=1, markName='ndst'}, Mark{idMark=59, markValue=2, markName='mrn'}, Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=61, markValue=4, markName='db'}, Mark{idMark=62, markValue=5, markName='bdb'}, Mark{idMark=63, markValue=6, markName='cel'}]}, Student{idStudent=66, userName='ibi', firstName='Izabela', lastName='Break', classroom=Classroom{idClassroom=70, classroomNumber=2, classroomName='Druga'}, studentMarks=[Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=60, markValue=3, markName='dst'}, Mark{idMark=60, markValue=3, markName='dst'}]}]>
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
	at com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest.getStudentsAboveStudentAverageTest(StatisticServiceIntegrationTest.java:282)
]]></failure>
    <system-out>Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Classroom (classroomName, classroomNumber, idClassroom) values (?, ?, ?)
Hibernate: insert into Classroom (classroomName, classroomNumber, idClassroom) values (?, ?, ?)
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: select * from Student where userName = ?
Hibernate: select student0_.idStudent as idStuden1_3_, student0_.classroom_idClassroom as classroo5_3_, student0_.firstName as firstNam2_3_, student0_.lastName as lastName3_3_, student0_.userName as userName4_3_ from Student student0_
Hibernate: select classroom0_.idClassroom as idClassr1_0_0_, classroom0_.classroomName as classroo2_0_0_, classroom0_.classroomNumber as classroo3_0_0_, studentsin1_.classroom_idClassroom as classroo5_3_1_, studentsin1_.idStudent as idStuden1_3_1_, studentsin1_.idStudent as idStuden1_3_2_, studentsin1_.classroom_idClassroom as classroo5_3_2_, studentsin1_.firstName as firstNam2_3_2_, studentsin1_.lastName as lastName3_3_2_, studentsin1_.userName as userName4_3_2_, studentmar2_.studentsWithMark_idStudent as students2_2_3_, mark3_.idMark as studentM1_2_3_, mark3_.idMark as idMark1_1_4_, mark3_.markName as markName2_1_4_, mark3_.markValue as markValu3_1_4_ from Classroom classroom0_ left outer join Student studentsin1_ on classroom0_.idClassroom=studentsin1_.classroom_idClassroom left outer join Mark_Student studentmar2_ on studentsin1_.idStudent=studentmar2_.studentsWithMark_idStudent left outer join Mark mark3_ on studentmar2_.studentMarks_idMark=mark3_.idMark where classroom0_.idClassroom=?
Hibernate: select studentswi0_.studentMarks_idMark as studentM1_2_0_, studentswi0_.studentsWithMark_idStudent as students2_2_0_, student1_.idStudent as idStuden1_3_1_, student1_.classroom_idClassroom as classroo5_3_1_, student1_.firstName as firstNam2_3_1_, student1_.lastName as lastName3_3_1_, student1_.userName as userName4_3_1_, classroom2_.idClassroom as idClassr1_0_2_, classroom2_.classroomName as classroo2_0_2_, classroom2_.classroomNumber as classroo3_0_2_ from Mark_Student studentswi0_ inner join Student student1_ on studentswi0_.studentsWithMark_idStudent=student1_.idStudent left outer join Classroom classroom2_ on student1_.classroom_idClassroom=classroom2_.idClassroom where studentswi0_.studentMarks_idMark=?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
</system-out>
  </testcase>
  <testcase name="countAverageMarkForUser_WithNoMarksTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="1.332"/>
  <testcase name="countAverageMarkForUserTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="1.071"/>
  <testcase name="countHowManyStudentsAboveStudentAverageTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.544">
    <error message="could not execute statement; SQL [n/a]; constraint [PRIMARY]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement" type="org.springframework.dao.DataIntegrityViolationException">org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; constraint [PRIMARY]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.Util.getInstance(Util.java:386)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1039)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4098)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4030)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2490)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2651)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2677)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2134)
	at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2434)
	at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2352)
	at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2337)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2934)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3434)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:89)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:582)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:456)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:337)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:50)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1361)
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1443)
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1402)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1374)
	at org.hibernate.Query.getResultList(Query.java:417)
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:55)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findAll(SimpleJpaRepository.java:327)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at com.sun.proxy.$Proxy58.findAll(Unknown Source)
	at com.jakub.ajamarks.services.statisticservices.StatisticServiceImpl.countHowManyStudentsAboveStudentAverage(StatisticServiceImpl.java:157)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at com.sun.proxy.$Proxy62.countHowManyStudentsAboveStudentAverage(Unknown Source)
	at com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest.countHowManyStudentsAboveStudentAverageTest(StatisticServiceIntegrationTest.java:256)
</error>
    <system-out>Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
00:27:56.429 [main] ERROR o.h.e.j.s.SqlExceptionHelper - Duplicate entry '101' for key 'PRIMARY'
</system-out>
  </testcase>
  <testcase name="countHowManyStudentsAboveSchoolAverageTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.565">
    <failure message="&#10;Expected: is &lt;1&gt;&#10;     but: was &lt;2&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: 
Expected: is <1>
     but: was <2>
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
	at com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest.countHowManyStudentsAboveSchoolAverageTest(StatisticServiceIntegrationTest.java:247)
]]></failure>
    <system-out>Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Classroom (classroomName, classroomNumber, idClassroom) values (?, ?, ?)
Hibernate: insert into Classroom (classroomName, classroomNumber, idClassroom) values (?, ?, ?)
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: select student0_.idStudent as idStuden1_3_, student0_.classroom_idClassroom as classroo5_3_, student0_.firstName as firstNam2_3_, student0_.lastName as lastName3_3_, student0_.userName as userName4_3_ from Student student0_
Hibernate: select classroom0_.idClassroom as idClassr1_0_0_, classroom0_.classroomName as classroo2_0_0_, classroom0_.classroomNumber as classroo3_0_0_, studentsin1_.classroom_idClassroom as classroo5_3_1_, studentsin1_.idStudent as idStuden1_3_1_, studentsin1_.idStudent as idStuden1_3_2_, studentsin1_.classroom_idClassroom as classroo5_3_2_, studentsin1_.firstName as firstNam2_3_2_, studentsin1_.lastName as lastName3_3_2_, studentsin1_.userName as userName4_3_2_, studentmar2_.studentsWithMark_idStudent as students2_2_3_, mark3_.idMark as studentM1_2_3_, mark3_.idMark as idMark1_1_4_, mark3_.markName as markName2_1_4_, mark3_.markValue as markValu3_1_4_ from Classroom classroom0_ left outer join Student studentsin1_ on classroom0_.idClassroom=studentsin1_.classroom_idClassroom left outer join Mark_Student studentmar2_ on studentsin1_.idStudent=studentmar2_.studentsWithMark_idStudent left outer join Mark mark3_ on studentmar2_.studentMarks_idMark=mark3_.idMark where classroom0_.idClassroom=?
Hibernate: select studentswi0_.studentMarks_idMark as studentM1_2_0_, studentswi0_.studentsWithMark_idStudent as students2_2_0_, student1_.idStudent as idStuden1_3_1_, student1_.classroom_idClassroom as classroo5_3_1_, student1_.firstName as firstNam2_3_1_, student1_.lastName as lastName3_3_1_, student1_.userName as userName4_3_1_, classroom2_.idClassroom as idClassr1_0_2_, classroom2_.classroomName as classroo2_0_2_, classroom2_.classroomNumber as classroo3_0_2_ from Mark_Student studentswi0_ inner join Student student1_ on studentswi0_.studentsWithMark_idStudent=student1_.idStudent left outer join Classroom classroom2_ on student1_.classroom_idClassroom=classroom2_.idClassroom where studentswi0_.studentMarks_idMark=?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
</system-out>
  </testcase>
  <testcase name="sortStudentsByAverageAscTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.497"/>
  <testcase name="countAverageMarkForClassroomTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.401"/>
  <testcase name="getFromClassroomMarkStudentListMapTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.394"/>
  <testcase name="getFromSchoolMarkStudentListMapTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.486"/>
  <testcase name="getStudentsAboveSchoolAverageTest" classname="com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest" time="0.495">
    <failure message="&#10;Expected: is &lt;[Student{idStudent=101, userName=&apos;DefaultuserName&apos;, firstName=&apos;DefaultFirst&apos;, lastName=&apos;DefaultLast&apos;, classroom=Classroom{idClassroom=101, classroomNumber=111, classroomName=&apos;Default&apos;}, studentMarks=[Mark{idMark=101, markValue=111, markName=&apos;Default&apos;}]}]&gt;&#10;     but: was &lt;[Student{idStudent=183, userName=&apos;aja&apos;, firstName=&apos;Jakub&apos;, lastName=&apos;Angel&apos;, classroom=Classroom{idClassroom=195, classroomNumber=1, classroomName=&apos;Pierwsza&apos;}, studentMarks=[Mark{idMark=184, markValue=1, markName=&apos;ndst&apos;}, Mark{idMark=185, markValue=2, markName=&apos;mrn&apos;}, Mark{idMark=186, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=187, markValue=4, markName=&apos;db&apos;}, Mark{idMark=188, markValue=5, markName=&apos;bdb&apos;}, Mark{idMark=189, markValue=6, markName=&apos;cel&apos;}]}, Student{idStudent=192, userName=&apos;ibi&apos;, firstName=&apos;Izabela&apos;, lastName=&apos;Break&apos;, classroom=Classroom{idClassroom=196, classroomNumber=2, classroomName=&apos;Druga&apos;}, studentMarks=[Mark{idMark=186, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=186, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=186, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=186, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=186, markValue=3, markName=&apos;dst&apos;}, Mark{idMark=186, markValue=3, markName=&apos;dst&apos;}]}]&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: 
Expected: is <[Student{idStudent=101, userName='DefaultuserName', firstName='DefaultFirst', lastName='DefaultLast', classroom=Classroom{idClassroom=101, classroomNumber=111, classroomName='Default'}, studentMarks=[Mark{idMark=101, markValue=111, markName='Default'}]}]>
     but: was <[Student{idStudent=183, userName='aja', firstName='Jakub', lastName='Angel', classroom=Classroom{idClassroom=195, classroomNumber=1, classroomName='Pierwsza'}, studentMarks=[Mark{idMark=184, markValue=1, markName='ndst'}, Mark{idMark=185, markValue=2, markName='mrn'}, Mark{idMark=186, markValue=3, markName='dst'}, Mark{idMark=187, markValue=4, markName='db'}, Mark{idMark=188, markValue=5, markName='bdb'}, Mark{idMark=189, markValue=6, markName='cel'}]}, Student{idStudent=192, userName='ibi', firstName='Izabela', lastName='Break', classroom=Classroom{idClassroom=196, classroomNumber=2, classroomName='Druga'}, studentMarks=[Mark{idMark=186, markValue=3, markName='dst'}, Mark{idMark=186, markValue=3, markName='dst'}, Mark{idMark=186, markValue=3, markName='dst'}, Mark{idMark=186, markValue=3, markName='dst'}, Mark{idMark=186, markValue=3, markName='dst'}, Mark{idMark=186, markValue=3, markName='dst'}]}]>
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
	at com.jakub.ajamarks.services.statisticservices.StatisticServiceIntegrationTest.getStudentsAboveSchoolAverageTest(StatisticServiceIntegrationTest.java:270)
]]></failure>
    <system-out>Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Mark (markName, markValue, idMark) values (?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Student (classroom_idClassroom, firstName, lastName, userName, idStudent) values (?, ?, ?, ?, ?)
Hibernate: insert into Classroom (classroomName, classroomNumber, idClassroom) values (?, ?, ?)
Hibernate: insert into Classroom (classroomName, classroomNumber, idClassroom) values (?, ?, ?)
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: update Student set classroom_idClassroom=?, firstName=?, lastName=?, userName=? where idStudent=?
Hibernate: select student0_.idStudent as idStuden1_3_, student0_.classroom_idClassroom as classroo5_3_, student0_.firstName as firstNam2_3_, student0_.lastName as lastName3_3_, student0_.userName as userName4_3_ from Student student0_
Hibernate: select classroom0_.idClassroom as idClassr1_0_0_, classroom0_.classroomName as classroo2_0_0_, classroom0_.classroomNumber as classroo3_0_0_, studentsin1_.classroom_idClassroom as classroo5_3_1_, studentsin1_.idStudent as idStuden1_3_1_, studentsin1_.idStudent as idStuden1_3_2_, studentsin1_.classroom_idClassroom as classroo5_3_2_, studentsin1_.firstName as firstNam2_3_2_, studentsin1_.lastName as lastName3_3_2_, studentsin1_.userName as userName4_3_2_, studentmar2_.studentsWithMark_idStudent as students2_2_3_, mark3_.idMark as studentM1_2_3_, mark3_.idMark as idMark1_1_4_, mark3_.markName as markName2_1_4_, mark3_.markValue as markValu3_1_4_ from Classroom classroom0_ left outer join Student studentsin1_ on classroom0_.idClassroom=studentsin1_.classroom_idClassroom left outer join Mark_Student studentmar2_ on studentsin1_.idStudent=studentmar2_.studentsWithMark_idStudent left outer join Mark mark3_ on studentmar2_.studentMarks_idMark=mark3_.idMark where classroom0_.idClassroom=?
Hibernate: select studentswi0_.studentMarks_idMark as studentM1_2_0_, studentswi0_.studentsWithMark_idStudent as students2_2_0_, student1_.idStudent as idStuden1_3_1_, student1_.classroom_idClassroom as classroo5_3_1_, student1_.firstName as firstNam2_3_1_, student1_.lastName as lastName3_3_1_, student1_.userName as userName4_3_1_, classroom2_.idClassroom as idClassr1_0_2_, classroom2_.classroomName as classroo2_0_2_, classroom2_.classroomNumber as classroo3_0_2_ from Mark_Student studentswi0_ inner join Student student1_ on studentswi0_.studentsWithMark_idStudent=student1_.idStudent left outer join Classroom classroom2_ on student1_.classroom_idClassroom=classroom2_.idClassroom where studentswi0_.studentMarks_idMark=?
Hibernate: select student0_.idStudent as idStuden1_3_, student0_.classroom_idClassroom as classroo5_3_, student0_.firstName as firstNam2_3_, student0_.lastName as lastName3_3_, student0_.userName as userName4_3_ from Student student0_
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
Hibernate: select * from Student where userName = ?
</system-out>
  </testcase>
</testsuite>